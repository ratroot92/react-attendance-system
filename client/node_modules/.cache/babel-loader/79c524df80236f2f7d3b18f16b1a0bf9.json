{"ast":null,"code":"import axios from 'axios';\nconst userService = {\n  login: user => {\n    return axios.post(`${process.env.REACT_APP_SERVER_URL}/user/login`, user, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: \"include\"\n    }).then(response => {\n      if (response.status !== 401) return response.data;\n      return response;\n    }).catch(err => {\n      console.log(\"%cError => userService --login \", \"font-size:12px;font-weight:bold;color:red;\");\n      console.log(err);\n      return err.response;\n    });\n  },\n  isAuthenticated: () => {\n    return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/is-authenticated`, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      if (response.status !== 401) {\n        return response.data;\n      }\n\n      return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    }).catch(error => {\n      console.log(error);\n      return {\n        isAuthenticated: false,\n        user: {\n          username: \"\",\n          role: \"\"\n        }\n      };\n    });\n  },\n  logout: () => {\n    return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/logout`, {\n      withCredentials: true\n    }).then(data => data.data).catch(err => err);\n  },\n  userExist: email => {\n    return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/exist?email=${email}`, {\n      withCredentials: true\n    }).then(data => data.data).catch(err => err);\n  }\n};\nexport default userService;","map":{"version":3,"sources":["/home/asd/Desktop/development/angan_test/client/src/services/userService.js"],"names":["axios","userService","login","user","post","process","env","REACT_APP_SERVER_URL","headers","credentials","then","response","status","data","catch","err","console","log","isAuthenticated","get","username","role","error","logout","withCredentials","userExist","email"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,MAAMC,WAAW,GAAC;AACdC,EAAAA,KAAK,EAAEC,IAAD,IAAQ;AACV,WAAOH,KAAK,CAACI,IAAN,CAAY,GAAEC,OAAO,CAACC,GAAR,CAAYC,oBAAqB,aAA/C,EAA4DJ,IAA5D,EAAiE;AACpEK,MAAAA,OAAO,EAAC;AACJ,wBAAe;AADX,OAD4D;AAIpEC,MAAAA,WAAW,EAAE;AAJuD,KAAjE,EAKJC,IALI,CAKCC,QAAQ,IAAE;AACd,UAAGA,QAAQ,CAACC,MAAT,KAAkB,GAArB,EAAyB,OAAOD,QAAQ,CAACE,IAAhB;AACzB,aAAOF,QAAP;AACH,KARM,EAQJG,KARI,CAQEC,GAAG,IAAE;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA8C,4CAA9C;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,aAAOA,GAAG,CAACJ,QAAX;AACH,KAZM,CAAP;AAaH,GAfa;AAgBdO,EAAAA,eAAe,EAAE,MAAM;AACnB,WAAOlB,KAAK,CAACmB,GAAN,CAAW,GAAEd,OAAO,CAACC,GAAR,CAAYC,oBAAqB,wBAA9C,EAAsE;AACzEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AADgE,KAAtE,EAKJE,IALI,CAKEC,QAAD,IAAc;AAClB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,eAAOD,QAAQ,CAACE,IAAhB;AACD;;AACD,aAAO;AAAEK,QAAAA,eAAe,EAAE,KAAnB;AAA0Bf,QAAAA,IAAI,EAAE;AAAEiB,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,IAAI,EAAE;AAAtB;AAAhC,OAAP;AACD,KAVI,EAWJP,KAXI,CAWGQ,KAAD,IAAW;AAChBN,MAAAA,OAAO,CAACC,GAAR,CAAYK,KAAZ;AACA,aAAO;AAAEJ,QAAAA,eAAe,EAAE,KAAnB;AAA0Bf,QAAAA,IAAI,EAAE;AAAEiB,UAAAA,QAAQ,EAAE,EAAZ;AAAgBC,UAAAA,IAAI,EAAE;AAAtB;AAAhC,OAAP;AACD,KAdI,CAAP;AAeD,GAhCW;AAiCZE,EAAAA,MAAM,EAAE,MAAM;AACZ,WAAOvB,KAAK,CAACmB,GAAN,CAAW,GAAEd,OAAO,CAACC,GAAR,CAAYC,oBAAqB,cAA9C,EAA4D;AACjEiB,MAAAA,eAAe,EAAE;AADgD,KAA5D,EAGJd,IAHI,CAGEG,IAAD,IAAUA,IAAI,CAACA,IAHhB,EAIJC,KAJI,CAIGC,GAAD,IAASA,GAJX,CAAP;AAKD,GAvCW;AAwCZU,EAAAA,SAAS,EAAGC,KAAD,IAAW;AACpB,WAAO1B,KAAK,CAACmB,GAAN,CAAW,GAAEd,OAAO,CAACC,GAAR,CAAYC,oBAAqB,qBAAoBmB,KAAM,EAAxE,EAA0E;AAC/EF,MAAAA,eAAe,EAAE;AAD8D,KAA1E,EAGJd,IAHI,CAGEG,IAAD,IAAUA,IAAI,CAACA,IAHhB,EAIJC,KAJI,CAIGC,GAAD,IAASA,GAJX,CAAP;AAKD;AA9CW,CAAlB;AAiDA,eAAed,WAAf","sourcesContent":["import axios from 'axios';\n\n\nconst userService={\n    login:(user)=>{\n        return axios.post(`${process.env.REACT_APP_SERVER_URL}/user/login`,user,{\n            headers:{\n                'Content-Type':'application/json'\n            },\n            credentials: \"include\",\n        }).then(response=>{\n            if(response.status!==401)return response.data\n            return response\n        }).catch(err=>{\n            console.log(\"%cError => userService --login \",\"font-size:12px;font-weight:bold;color:red;\");\n            console.log(err);\n            return err.response\n        })\n    },\n    isAuthenticated: () => {\n        return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/is-authenticated`,{\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          })\n          .then((response) => {\n            if (response.status !== 401) {\n              return response.data;\n            }\n            return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n          })\n          .catch((error) => {\n            console.log(error);\n            return { isAuthenticated: false, user: { username: \"\", role: \"\" } };\n          });\n      },\n      logout: () => {\n        return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/logout`,{\n          withCredentials: true,\n        })\n          .then((data) => data.data)\n          .catch((err) => err);\n      },\n      userExist: (email) => {\n        return axios.get(`${process.env.REACT_APP_SERVER_URL}/user/exist?email=${email}`,{\n          withCredentials: true,\n        })\n          .then((data) => data.data)\n          .catch((err) => err);\n      },\n}\n\nexport default userService;"]},"metadata":{},"sourceType":"module"}